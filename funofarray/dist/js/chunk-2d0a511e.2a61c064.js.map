{"version":3,"sources":["webpack:///./src/components/Detail.vue?e161","webpack:///src/components/Detail.vue","webpack:///./src/components/Detail.vue?ed61","webpack:///./src/components/Detail.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","_v","_s","funName","domProps","detail","con1","con2","version","on","$event","$router","back","staticRenderFns","component"],"mappings":"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","file":"js/chunk-2d0a511e.2a61c064.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"detail\"}},[_c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"row justify-content-center\"},[_c('div',{staticClass:\"col-md-8 my-3\"},[_c('h3',[_vm._v(_vm._s(_vm.funName))]),_c('h5',{staticClass:\"my-3 border-bottom pb-2\"},[_vm._v(\"定义和用法\")]),_c('div',{staticClass:\"pb-3\",domProps:{\"innerHTML\":_vm._s(_vm.detail.con1)}}),_c('h5',{staticClass:\"my-3 border-bottom pb-2\"},[_vm._v(\"语法\")]),_c('div',{staticClass:\"pb-3\"},[_c('code',[_vm._v(_vm._s(_vm.detail.con2))])]),_c('h5',{staticClass:\"my-3 border-bottom pb-2\"},[_vm._v(\"JavaScript 版本\")]),_c('div',{staticClass:\"pb-3\"},[_vm._v(_vm._s(_vm.detail.version))]),_c('div',{staticClass:\"text-center\"},[_c('button',{staticClass:\"btn btn-primary\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.$router.back()}}},[_vm._v(\"返回\")])])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div id=\"detail\">\r\n        <div class=\"container\">\r\n            <div class=\"row justify-content-center\">\r\n                <div class=\"col-md-8 my-3\">\r\n                    <h3>{{funName}}</h3>\r\n                    <h5 class=\"my-3 border-bottom pb-2\">定义和用法</h5>\r\n                    <div v-html=\"detail.con1\" class=\"pb-3\"></div>\r\n                    <h5 class=\"my-3 border-bottom pb-2\">语法</h5>\r\n                    <div class=\"pb-3\">\r\n                        <code>{{detail.con2}}</code>\r\n                    </div>\r\n                    <h5 class=\"my-3 border-bottom pb-2\">JavaScript 版本</h5>\r\n                    <div class=\"pb-3\">{{detail.version}}</div>\r\n                    <div class=\"text-center\">\r\n                        <button class=\"btn btn-primary\" @click=\"$router.back()\" type=\"button\">返回</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"Detail\",\r\n    data() {\r\n        return {\r\n            funName: \"\",\r\n        };\r\n    },\r\n    created: function () {\r\n        this.funName = this.$route.params.funname;\r\n    },\r\n    computed: {\r\n        detail: function () {\r\n            var that = this;\r\n            switch (that.funName) {\r\n                case \"concat\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>concat() 方法用于连接两个或多个数组。</p><p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p>\",\r\n                        con2: \"array1.concat(array2,array3,...,arrayX)\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"copyWithin\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中。</p>\",\r\n                        con2: \"array.copyWithin(target, start, end)\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"entries\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>entries() 方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。</p><p>迭代对象中数组的索引值作为 key， 数组元素作为 value。</p>\",\r\n                        con2: \"array.entries()\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"every\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。\" +\r\n                            \"<p>every() 方法使用指定函数检测数组中的所有元素：\" +\r\n                            \"<p>    如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。\" +\r\n                            \"<p>    如果所有元素都满足条件，则返回 true。\" +\r\n                            \"<p>注意： every() 不会对空数组进行检测。\" +\r\n                            \"<p>注意： every() 不会改变原始数组。\",\r\n                        con2:\r\n                            \"array.every(function(currentValue,index,arr), thisValue)\",\r\n                        version: \"1.6\",\r\n                    };\r\n                    break;\r\n                case \"fill\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>fill() 方法用于将一个固定值替换数组的元素。</p>\",\r\n                        con2: \"array.fill(value, start, end)\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"filter\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>\" +\r\n                            \"<p>注意： filter() 不会对空数组进行检测。</p>\" +\r\n                            \"<p>注意： filter() 不会改变原始数组。</p>\",\r\n                        con2:\r\n                            \"array.filter(function(currentValue,index,arr), thisValue)\",\r\n                        version: \"1.6\",\r\n                    };\r\n                    break;\r\n                case \"find\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p>\" +\r\n                            \"<p>find() 方法为数组中的每个元素都调用一次函数执行：</p>\" +\r\n                            \"<p>当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</p>\" +\r\n                            \"<p>如果没有符合条件的元素返回 undefined</p>\" +\r\n                            \"<p>注意: find() 对于空数组，函数是不会执行的。</p>\" +\r\n                            \"<p>注意：find() 并没有改变数组的原始值。</p>\",\r\n                        con2:\r\n                            \"array.find(function(currentValue, index, arr),thisValue)\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"findIndex\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p>\" +\r\n                            \"<p>findIndex() 方法为数组中的每个元素都调用一次函数执行：</p>\" +\r\n                            \"<p>当数组中的元素在测试条件时返回 true 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</p>\" +\r\n                            \"<p>如果没有符合条件的元素返回 -1</p>\" +\r\n                            \"<p>注意: findIndex() 对于空数组，函数是不会执行的。</p>\" +\r\n                            \"<p>注意: findIndex() 并没有改变数组的原始值。</p>\",\r\n                        con2:\r\n                            \"array.findIndex(function(currentValue, index, arr), thisValue)\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"forEach\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p>\" +\r\n                            \"<p>注意: forEach() 对于空数组是不会执行回调函数的。</p>\",\r\n                        con2:\r\n                            \"array.forEach(function(currentValue, index, arr), thisValue)\",\r\n                        version: \"ECMAScript 3\",\r\n                    };\r\n                    break;\r\n                case \"from\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组。</p>\" +\r\n                            \"<p>如果对象是数组返回 true，否则返回 false。</p>\",\r\n                        con2: \"Array.from(object, mapFunction, thisValue)\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"includes\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。</p>\",\r\n                        con2:\r\n                            \"arr.includes(searchElement) / arr.includes(searchElement, fromIndex)\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"indexOf\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>indexOf() 方法可返回数组中某个指定的元素位置。</p>\" +\r\n                            \"<p>该方法将从头到尾地检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置。开始位置的索引为 0。</p>\" +\r\n                            \"<p>如果在数组中没找到指定元素则返回 -1。</p>\" +\r\n                            \"<p>提示如果你想查找字符串最后出现的位置，请使用 lastIndexOf() 方法。</p>\",\r\n                        con2: \"array.indexOf(item,start)\",\r\n                        version: \"1.6\",\r\n                    };\r\n                    break;\r\n                case \"isArray\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>isArray() 方法用于判断一个对象是否为数组。</p>\" +\r\n                            \"<p>如果对象是数组返回 true，否则返回 false。</p>\",\r\n                        con2: \"Array.isArray(obj)\",\r\n                        version: \"ECMAScript 5\",\r\n                    };\r\n                    break;\r\n                case \"join\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>join() 方法用于把数组中的所有元素转换一个字符串。</p>\" +\r\n                            \"<p>元素是通过指定的分隔符进行分隔的。</p>\",\r\n                        con2: \"array.join(separator)\",\r\n                        version: \"1.1\",\r\n                    };\r\n                    break;\r\n                case \"keys\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>keys() 方法用于从数组创建一个包含数组键的可迭代对象。</p>\" +\r\n                            \"<p>如果对象是数组返回 true，否则返回 false。</p>\",\r\n                        con2: \"array.keys()\",\r\n                        version: \"ECMAScript 6\",\r\n                    };\r\n                    break;\r\n                case \"lastIndexOf\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>lastIndexOf() 方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。</p>\" +\r\n                            \"<p>如果要检索的元素没有出现，则该方法返回 -1。</p>\" +\r\n                            \"<p>该方法将从尾到头地检索数组中指定元素 item。开始检索的位置在数组的 start 处或数组的结尾（没有指定 start 参数时）。如果找到一个 item，则返回 item 从尾向前检索第一个次出现在数组的位置。数组的索引开始位置是从 0 开始的。</p>\" +\r\n                            \"<p>如果在数组中没找到指定元素则返回 -1。</p>\" +\r\n                            \"<p>提示： 如果你想查找数组首次出现的位置，请使用 indexOf() 方法。</p>\",\r\n                        con2: \"array.lastIndexOf(item,start)\",\r\n                        version: \"1.6\",\r\n                    };\r\n                    break;\r\n                case \"map\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p>\" +\r\n                            \"<p>map() 方法按照原始数组元素顺序依次处理元素。</p>\" +\r\n                            \"<p>注意： map() 不会对空数组进行检测。</p>\" +\r\n                            \"<p>注意： map() 不会改变原始数组。</p>\",\r\n                        con2:\r\n                            \"array.map(function(currentValue,index,arr), thisValue)\",\r\n                        version: \"1.6\",\r\n                    };\r\n                    break;\r\n                case \"pop\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>pop() 方法用于删除数组的最后一个元素并返回删除的元素。</p>\" +\r\n                            \"<p>注意：此方法改变数组的长度！</p>\" +\r\n                            \"<p>提示： 移除数组第一个元素，请使用 shift() 方法。</p>\",\r\n                        con2: \"array.pop()\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"push\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>\" +\r\n                            \"<p>注意： 新元素将添加在数组的末尾。</p>\" +\r\n                            \"<p>注意： 此方法改变数组的长度。</p>\" +\r\n                            \"<p>提示： 在数组起始位置添加元素请使用 unshift() 方法。</p>\",\r\n                        con2: \"array.push(item1, item2, ..., itemX)\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"reduce\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>\" +\r\n                            \"<p>educe() 可以作为一个高阶函数，用于函数的 compose。</p>\" +\r\n                            \"<p>注意: reduce() 对于空数组是不会执行回调函数的。</p>\",\r\n                        con2:\r\n                            \"array.reduce(function(total, currentValue, currentIndex, arr), initialValue)\",\r\n                        version: \"ECMAScript 3\",\r\n                    };\r\n                    break;\r\n                case \"reduceRight\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>reduceRight() 方法的功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加。</p>\" +\r\n                            \"<p>注意: reduce() 对于空数组是不会执行回调函数的。</p>\",\r\n                        con2:\r\n                            \"array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)\",\r\n                        version: \"ECMAScript 3\",\r\n                    };\r\n                    break;\r\n                case \"reverse\":\r\n                    return {\r\n                        con1: \"<p>reverse() 方法用于颠倒数组中元素的顺序。</p>\",\r\n                        con2: \"array.reverse()\",\r\n                        version: \"1.1\",\r\n                    };\r\n                    break;\r\n                case \"shift\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p>\" +\r\n                            \"<p>注意： 此方法改变数组的长度！</p>\" +\r\n                            \"<p>提示: 移除数组末尾的元素可以使用 pop() 方法。</p>\",\r\n                        con2: \"array.shift()\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"slice\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>slice() 方法可从已有的数组中返回选定的元素。</p>\" +\r\n                            \"<p>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</p>\" +\r\n                            \"<p>注意： slice() 方法不会改变原始数组。</p>\",\r\n                        con2: \"array.slice(start, end)\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"some\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p>\" +\r\n                            \"<p>some() 方法会依次执行数组的每个元素：</p>\" +\r\n                            \"<p>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</p>\" +\r\n                            \"<p>如果没有满足条件的元素，则返回false。</p>\" +\r\n                            \"<p>注意： some() 不会对空数组进行检测。</p>\" +\r\n                            \"<p>注意： some() 不会改变原始数组。</p>\",\r\n                        con2:\r\n                            \"array.some(function(currentValue,index,arr),thisValue)\",\r\n                        version: \"1.6\",\r\n                    };\r\n                    break;\r\n                case \"sort\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>sort() 方法用于对数组的元素进行排序。</p>\" +\r\n                            \"<p>排序顺序可以是字母或数字，并按升序或降序。</p>\" +\r\n                            \"<p>默认排序顺序为按字母升序。</p>\" +\r\n                            '<p>注意：当数字是按字母顺序排列时\"40\"将排在\"5\"前面。</p>' +\r\n                            \"<p>使用数字排序，你必须通过一个函数作为参数来调用。</p>\" +\r\n                            \"<p>函数指定数字是按照升序还是降序排列。</p>\" +\r\n                            \"<p>这些说起来可能很难理解，你可以通过本页底部实例进一步了解它。</p>\" +\r\n                            \"<p>注意： 这种方法会改变原始数组！。</p>\",\r\n                        con2: \"array.sort(sortfunction)\",\r\n                        version: \"1.1\",\r\n                    };\r\n                    break;\r\n                case \"splice\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>splice() 方法用于添加或删除数组中的元素。</p>\" +\r\n                            \"<p>注意： 这种方法会改变原始数组。</p>\",\r\n                        con2: \"array.splice(index,howmany,item1,.....,itemX)\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"toString\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>toString() 方法可把数组转换为字符串，并返回结果。</p>\" +\r\n                            \"<p>注意： 数组中的元素之间用逗号分隔。</p>\",\r\n                        con2: \"array.toString()\",\r\n                        version: \"1.1\",\r\n                    };\r\n                    break;\r\n                case \"unshift\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p>\" +\r\n                            \"<p>注意： 该方法将改变数组的数目。</p>\" +\r\n                            \"<p>提示: 将新项添加到数组末尾，请使用 push() 方法。</p>\",\r\n                        con2: \"array.unshift(item1,item2, ..., itemX)\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n                case \"valueOf\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>valueOf() 方法返回 Array 对象的原始值。</p>\" +\r\n                            \"<p>该原始值由 Array 对象派生的所有对象继承。</p>\" +\r\n                            \"<p>valueOf() 方法通常由 JavaScript 在后台自动调用，并不显式地出现在代码中。</p>\" +\r\n                            \"<p>注意： valueOf() 方法不会改变原数组。</p>\",\r\n                        con2: \"array.valueOf()\",\r\n                        version: \"1.2\",\r\n                    };\r\n                    break;\r\n\r\n                /* case \"concat\":\r\n                    return {\r\n                        con1:\r\n                            \"<p>方法用于连接两个或多个数组。</p>\" +\r\n                            \"<p>方法用于连接两个或多个数组。</p>\",\r\n                        con2: \"array1\",\r\n                        version: \"1123\",\r\n                    };\r\n                    break; */\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Detail.vue?vue&type=template&id=2ee0009c&\"\nimport script from \"./Detail.vue?vue&type=script&lang=js&\"\nexport * from \"./Detail.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}